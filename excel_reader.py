    
# excel_reader.py
import pandas as pd
import os
from typing import List, Dict, Optional

def read_students_from_excel(file_path: str) -> Optional[List[Dict]]:
    """
    –ß–∏—Ç–∞—î –¥–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ Excel-—Ñ–∞–π–ª—É —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î —ó—Ö –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –ø–æ—à—É–∫—É.
    –¢–∞–∫–æ–∂ –∑—á–∏—Ç—É—î –≤–∂–µ —ñ—Å–Ω—É—é—á—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ–± –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.
    """
    if not os.path.exists(file_path):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {file_path}")
        return None

    try:
        print(f"üìñ –ß–∏—Ç–∞—é –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É '{os.path.basename(file_path)}'...")
        df = pd.read_excel(file_path, engine='openpyxl')

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
        required_columns = ['–ü—Ä—ñ–∑–≤–∏—â–µ', "–Ü–º'—è", '–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ', '–ö–æ–Ω–∫. –±–∞–ª']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –£ —Ñ–∞–π–ª—ñ Excel –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ: {missing_columns}")
            return None

        students_list = []
        for index, row in df.iterrows():
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏, –æ—Ä—ñ—î–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
            if pd.isna(row['–ü—Ä—ñ–∑–≤–∏—â–µ']):
                continue

            last_name = str(row['–ü—Ä—ñ–∑–≤–∏—â–µ']).strip()
            first_name = str(row["–Ü–º'—è"]).strip()
            patronymic = str(row['–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ']).strip()
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –¥–ª—è –ø–æ—à—É–∫—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "–ü—Ä—ñ–∑–≤–∏—â–µ –Ü. –ü."
            first_name_initial = f"{first_name[0]}." if first_name else ''
            patronymic_initial = f" {patronymic[0]}." if patronymic else ''
            search_name = f"{last_name} {first_name_initial}{patronymic_initial}".strip()
            
            # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢ ---
            # –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–¥—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ
            raw_spec_code = row.get('–ö–æ–¥ —Å–ø–µ—Ü')
            if pd.notna(raw_spec_code):
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Ä—è–¥–æ–∫ —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ '.0' –≤ –∫—ñ–Ω—Ü—ñ, —è–∫—â–æ —Ü–µ –±—É–ª–æ —á–∏—Å–ª–æ
                specialty_code = str(raw_spec_code).replace('.0', '').strip()
            else:
                specialty_code = None
            # --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

            # –û–±—Ä–æ–±–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            raw_result = row.get('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏')
            current_result = str(raw_result).strip() if pd.notna(raw_result) else None

            student_data = {
                'index': index,
                'search_name': search_name,
                'last_name': last_name,
                'first_name': first_name,
                'patronymic': patronymic,
                'score': row['–ö–æ–Ω–∫. –±–∞–ª'],
                'specialty_code': specialty_code,
                '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏': current_result
            }
            students_list.append(student_data)
        
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(students_list)} –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ñ–∞–π–ª—É.")
        return students_list
        
    except Exception as e:
        # –î–æ–¥–∞—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—É –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É Excel: {type(e).__name__}: {e}")
        return None

  