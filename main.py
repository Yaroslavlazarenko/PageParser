# main.py
import os
import shutil
import math
import asyncio
from typing import Dict, List

from config_loader import load_config
from excel_reader import read_students_from_excel
from api_parser import fetch_applications_html, parse_applications, close_session
from excel_writer import save_results_to_excel

MAX_CONCURRENT_REQUESTS = 50

async def process_student_async(student: Dict) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ–±—Ä–æ–±–ª—è—î –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –≤ —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    search_query = student['search_name']
    score_to_find = student['score']
    specialty_to_find = student['specialty_code']

    try:
        html_content = await fetch_applications_html(search_query)
        if not html_content:
            student['final_result'] = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∑–∞—è–≤–∏"
            return

        all_apps_by_name = parse_applications(html_content)
        if not all_apps_by_name:
            student['final_result'] = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢—Ä–µ–±–∞ –¥–∑–≤–æ–Ω–∏—Ç–∏"
            return
        
        reference_app = None
        for app in all_apps_by_name:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º –¥–ª—è –±—ñ–ª—å—à–æ—ó –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
            try:
                # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ score_to_find - —Ü–µ —á–∏—Å–ª–æ
                student_score = float(score_to_find)
                app_score = float(app.get('total_score', 0))
                score_matches = math.isclose(app_score, student_score, rel_tol=1e-5)
            except (ValueError, TypeError):
                score_matches = False # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —á–∏—Å–ª–æ, –≤–≤–∞–∂–∞—î–º–æ, —â–æ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è

            specialty_matches = (not specialty_to_find) or (app.get('specialty_code') == specialty_to_find)
            
            if score_matches and specialty_matches:
                reference_app = app
                break
        
        if not reference_app:
            student['final_result'] = "–ó–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ"
            return
        
        score_fingerprint = reference_app.get('score_components')
        if not score_fingerprint:
            student['final_result'] = "–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∏ –ù–ú–¢"
            return
            
        identified_student_apps = [
            app for app in all_apps_by_name if app.get('score_components') == score_fingerprint
        ]
        
        has_originals = any(app['originals_submitted'] for app in identified_student_apps)
        student['final_result'] = "–í–∂–µ –≤–∏–∑–Ω–∞—á–∏–≤—Å—è" if has_originals else "–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–∑–≤–æ–Ω–∏—Ç–∏"
    
    except Exception as e:
        # --- –ó–ú–Ü–ù–ê –¢–£–¢ ---
        # –ó–∞–ø–∏—Å—É—î–º–æ –Ω–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏, –∞ –π —ó—ó —Ç–µ–∫—Å—Ç
        student['final_result'] = f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {type(e).__name__}: {e}"


async def main_async_logic() -> List[Dict]:
    """–û—Å–Ω–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ª–æ–≥—ñ–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
    config = load_config()
    original_excel_path = config['excel_file_path']
    output_excel_filename = "students_with_results.xlsx"
    
    if not os.path.exists(output_excel_filename):
        print(f"üìÑ –°—Ç–≤–æ—Ä—é—é –∫–æ–ø—ñ—é —Ñ–∞–π–ª—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: '{output_excel_filename}'")
        shutil.copy(original_excel_path, output_excel_filename)
    else:
        print(f"üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: '{output_excel_filename}'")
    
    all_students = read_students_from_excel(output_excel_filename)
    if not all_students:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Excel –∞–±–æ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return []

    students_to_process = [s for s in all_students if not s.get('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏')]
    
    if not students_to_process:
        print("\n‚úÖ –í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ.")
        return []

    print(f"\n–í—Å—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ: {len(all_students)}")
    print(f"–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(students_to_process)}. –ó–∞–ø—É—Å–∫–∞—é –¥–æ {MAX_CONCURRENT_REQUESTS} –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å...")
    print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É.")

    tasks = [asyncio.create_task(process_student_async(student)) for student in students_to_process]
    
    for i, task in enumerate(asyncio.as_completed(tasks), 1):
        await task
        print(f"[{i}/{len(students_to_process)}] –û–±—Ä–æ–±–ª–µ–Ω–æ...", end='\r')

    print(f"\nüéâ –í—Å—ñ {len(students_to_process)} —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ.")
    return all_students

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É, —è–∫–∞ –∑–∞–ø—É—Å–∫–∞—î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ü–∏–∫–ª —ñ –æ–±—Ä–æ–±–ª—è—î –≤–∏–∫–ª—é—á–µ–Ω–Ω—è."""
    all_students: List[Dict] = []
    output_filename = "students_with_results.xlsx"
    config = {} # –û–≥–æ–ª–æ—à—É—î–º–æ —Ç—É—Ç, —â–æ–± –±—É–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ finally

    try:
        config = load_config() # –ó—á–∏—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        all_students = asyncio.run(main_async_logic())
            
    except KeyboardInterrupt:
        print("\n\nüõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Ctrl+C).")
    except SystemExit as e:
         print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        print(f"\n‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {type(e).__name__}: {e}")
    finally:
        print("\n–ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É...")
        
        asyncio.run(close_session())

        if all_students:
            students_with_new_results = [s for s in all_students if 'final_result' in s]
            if students_with_new_results:
                print("–ó–±–µ—Ä—ñ–≥–∞—é –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å...")
                # --- –ó–ú–Ü–ù–ê –¢–£–¢: –ë–µ—Ä–µ–º–æ –Ω–∞–∑–≤—É —Å—Ç–æ–≤–ø—Ü—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É ---
                output_col = config.get("output_column_name", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
                save_results_to_excel(output_filename, students_with_new_results, output_col)
            else:
                 print("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        else:
            print("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        
        print("–†–æ–±–æ—Ç—É –±–µ–∑–ø–µ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    main()