# main.py (–í–ï–†–°–ò–Ø, –°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –° –¢–í–û–ò–ú EXCEL_WRITER)
import os
import shutil
import math
import asyncio
from typing import Dict, List
import sys

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ
from config_loader import load_config
from excel_reader import read_students_from_excel
from excel_writer import save_results_to_excel

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è api_parser
from api_parser import (
    fetch_applications_html, 
    parse_applications, 
    APIError
)

# --- 1. –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def process_student_async(student: Dict, semaphore: asyncio.Semaphore) -> None:
    search_query = student['search_name']
    score_to_find = student['score']
    specialty_to_find = student['specialty_code']

    try:
        html_content = await fetch_applications_html(search_query, semaphore)
        if not html_content:
            student['final_result'] = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∑–∞—è–≤–∏"
            return

        all_apps_by_name = parse_applications(html_content)
        if not all_apps_by_name:
            student['final_result'] = "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢—Ä–µ–±–∞ –¥–∑–≤–æ–Ω–∏—Ç–∏"
            return
        
        reference_app = None
        for app in all_apps_by_name:
            try:
                student_score = float(score_to_find)
                app_score = float(app.get('total_score', 0))
                score_matches = math.isclose(app_score, student_score, rel_tol=1e-5)
            except (ValueError, TypeError):
                score_matches = False

            specialty_matches = (not specialty_to_find) or (app.get('specialty_code') == specialty_to_find)
            
            if score_matches and specialty_matches:
                reference_app = app
                break
        
        if not reference_app:
            student['final_result'] = "–ó–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ"
            return
        
        score_fingerprint = reference_app.get('score_components')
        if not score_fingerprint:
            student['final_result'] = "–ù–µ –≤–¥–∞–ª–æ—Å—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∏ –ù–ú–¢"
            return
            
        identified_student_apps = [
            app for app in all_apps_by_name if app.get('score_components') == score_fingerprint
        ]
        
        has_originals = any(app['originals_submitted'] for app in identified_student_apps)
        student['final_result'] = "–í–∂–µ –≤–∏–∑–Ω–∞—á–∏–≤—Å—è" if has_originals else "–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–∑–≤–æ–Ω–∏—Ç–∏"
    
    except APIError as e:
        student['final_result'] = f"–ü–æ–º–∏–ª–∫–∞ API: {e}"
    except asyncio.TimeoutError:
        student['final_result'] = "–ü–æ–º–∏–ª–∫–∞: –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ"
    except Exception as e:
        student['final_result'] = f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {type(e).__name__}: {e}"


# --- 2. –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
async def main_async_logic(config: Dict) -> List[Dict]:
    original_excel_path = config['excel_file_path']
    output_excel_filename = "students_with_results.xlsx"
    
    if not os.path.exists(original_excel_path):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª Excel –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {original_excel_path}")
        return []
    
    if not os.path.exists(output_excel_filename):
        print(f"üìÑ –°—Ç–≤–æ—Ä—é—é –∫–æ–ø—ñ—é —Ñ–∞–π–ª—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: '{output_excel_filename}'")
        shutil.copy(original_excel_path, output_excel_filename)
    else:
        print(f"üìÇ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —ñ—Å–Ω—É—é—á–∏–π —Ñ–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: '{output_excel_filename}'")
    
    all_students = read_students_from_excel(output_excel_filename)
    if not all_students:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Excel –∞–±–æ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return []
    
    output_col_name = config.get("output_column_name", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    students_to_process = [s for s in all_students if not s.get(output_col_name)]
    
    if not students_to_process:
        print("\n‚úÖ –í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ.")
        return all_students

    CONCURRENT_LIMIT = config.get("concurrent_requests", 5)
    semaphore = asyncio.Semaphore(CONCURRENT_LIMIT)

    print(f"\n–í—Å—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ: {len(all_students)}")
    print(f"–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {len(students_to_process)}. –ó–∞–ø—É—Å–∫–∞—é –¥–æ {CONCURRENT_LIMIT} –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤...")
    print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É.")

    tasks = [asyncio.create_task(process_student_async(student, semaphore)) for student in students_to_process]
    
    processed_count = 0
    total_to_process = len(students_to_process)
    for task in asyncio.as_completed(tasks):
        await task
        processed_count += 1
        print(f"[{processed_count}/{total_to_process}] –û–±—Ä–æ–±–ª–µ–Ω–æ...", end='\r')

    print(f"\nüéâ –í—Å—ñ {total_to_process} —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω—ñ.")
    return all_students

# --- 3. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É ---
def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
    all_students: List[Dict] = []
    output_filename = "students_with_results.xlsx"
    config = {}

    try:
        config = load_config()
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∫–ª—é—á
        if 'excel_file_path' not in config:
            print("‚ùå –°–¢–û–ü! –£ —Ñ–∞–π–ª—ñ config.yaml –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä 'excel_file_path'!")
            sys.exit(1)
            
        all_students = asyncio.run(main_async_logic(config))
            
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("\n\nüõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Ctrl+C).")
    except Exception as e:
        print(f"\n‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ: {type(e).__name__}: {e}")
    finally:
        print("\n–ó–∞–≤–µ—Ä—à—É—é —Ä–æ–±–æ—Ç—É...")
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï! –í–û–ó–í–†–ê–©–ê–ï–ú–°–Ø –ö –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–ï! ---
        if all_students and config:
            # –ü—Ä–æ—Å—Ç–æ, –±–ª—è–¥—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
            students_with_new_results = [s for s in all_students if 'final_result' in s]

            if students_with_new_results:
                print("–ó–±–µ—Ä—ñ–≥–∞—é –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å...")
                # –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
                output_col = config.get("output_column_name", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
                
                # –í—ã–∑—ã–≤–∞–µ–º —Ç–≤–æ–π –æ—Ö—É–µ–Ω–Ω—ã–π writer, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è –ø–æ 'index'
                save_results_to_excel(
                    file_path=output_filename, 
                    students_data=students_with_new_results, 
                    col_name=output_col
                )
            else:
                 print("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        else:
            print("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–º–æ–∂–ª–∏–≤–æ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ).")
        
        print("–†–æ–±–æ—Ç—É –±–µ–∑–ø–µ—á–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == "__main__":
    main()